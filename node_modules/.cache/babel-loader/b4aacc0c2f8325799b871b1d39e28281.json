{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\lrush\\\\Documents\\\\Bootcamp-Repository\\\\rpg-dream-team\\\\src\\\\components\\\\HomePage.js\";\nimport React, { useContext } from \"react\";\nimport Card from \"./Card\";\nimport CharacterContext from '../utils/CharacterContext';\nimport CheckBox from './CheckBox';\n\nconst Home = () => {\n  const Context = useContext(CharacterContext);\n  const Characters = Context.state;\n  const addCharacter = Context.bunchaFunctions.addCharacter;\n  const checkBoxStatus = Context.bunchaFunctions.checkBoxStatus; //Sort the funtion Aphabetically\n\n  const compare = (a, b) => {\n    // Use toUpperCase() to ignore character casing\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    let comparison = 0;\n\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  };\n\n  let alphabetCharacters = Characters.sort(compare); // check if any checkboxes are displayed and return a map of cards based on that\n\n  const determineOrder = () => {\n    if (checkBoxStatus) {\n      console.log(\"accessing alpha\");\n      return alphabetCharacters.map(character => React.createElement(Card, {\n        key: character.id,\n        character: character,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n    }\n\n    console.log(\" just accessing\");\n    return Characters.map(character => React.createElement(Card, {\n      key: character.id,\n      character: character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(CheckBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App\",\n    onClick: addCharacter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, determineOrder()));\n};\n\nexport default Home;","map":{"version":3,"sources":["c:/Users/lrush/Documents/Bootcamp-Repository/rpg-dream-team/src/components/HomePage.js"],"names":["React","useContext","Card","CharacterContext","CheckBox","Home","Context","Characters","state","addCharacter","bunchaFunctions","checkBoxStatus","compare","a","b","nameA","name","toUpperCase","nameB","comparison","alphabetCharacters","sort","determineOrder","console","log","map","character","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAKA,MAAMC,IAAI,GAAE,MAAM;AACd,QAAMC,OAAO,GAAEL,UAAU,CAACE,gBAAD,CAAzB;AADc,QAECI,UAFD,GAEeD,OAFf,CAENE,KAFM;AAAA,QAGNC,YAHM,GAGUH,OAAO,CAACI,eAHlB,CAGND,YAHM;AAAA,QAIPE,cAJO,GAIWL,OAAO,CAACI,eAJnB,CAIPC,cAJO,EAKf;;AAIC,QAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB;AACA,UAAMC,KAAK,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAd;AACA,UAAMC,KAAK,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAAd;AAGA,QAAIE,UAAU,GAAG,CAAjB;;AACA,QAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACjBC,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO,IAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACxBC,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,WAAOA,UAAP;AACD,GAbH;;AAcA,MAAIC,kBAAkB,GAAGb,UAAU,CAACc,IAAX,CAAgBT,OAAhB,CAAzB,CAvBc,CAwBZ;;AACF,QAAMU,cAAc,GAAG,MAAM;AAEzB,QAAIX,cAAJ,EAAoB;AAChBY,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAOJ,kBAAkB,CAACK,GAAnB,CAAwBC,SAAD,IAAgB,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAIA,SAAS,CAACC,EAAvB;AAA2B,QAAA,SAAS,EAAID,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvC,CAAP;AAEH;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAOjB,UAAU,CAACkB,GAAX,CAAgBC,SAAD,IAAgB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAIA,SAAS,CAACC,EAAvB;AAA2B,MAAA,SAAS,EAAID,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,CAAP;AAEH,GAVD;;AAgBJ,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,OAAO,EAAEjB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCa,cAAc,EADf,CAFA,CADJ;AASC,CAlDD;;AAoDA,eAAejB,IAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport Card from \"./Card\"\r\nimport CharacterContext from '../utils/CharacterContext'\r\nimport CheckBox from './CheckBox'\r\n\r\n\r\n\r\n\r\nconst Home= () => {\r\n    const Context= useContext(CharacterContext);\r\n    const { state: Characters} = Context\r\n    const { addCharacter} = Context.bunchaFunctions\r\n    const {checkBoxStatus} = Context.bunchaFunctions\r\n   //Sort the funtion Aphabetically\r\n    \r\n \r\n  \r\n    const compare = (a, b) => {\r\n        // Use toUpperCase() to ignore character casing\r\n        const nameA = a.name.toUpperCase();\r\n        const nameB = b.name.toUpperCase();\r\n        \r\n      \r\n        let comparison = 0;\r\n        if (nameA > nameB) {\r\n          comparison = 1;\r\n        } else if (nameA < nameB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n    let alphabetCharacters = Characters.sort(compare)\r\n      // check if any checkboxes are displayed and return a map of cards based on that\r\n    const determineOrder = () => {\r\n        \r\n        if (checkBoxStatus) {\r\n            console.log(\"accessing alpha\")\r\n            return alphabetCharacters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n            \r\n        }\r\n        console.log(\" just accessing\")\r\n        return Characters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n       \r\n    }\r\n  \r\n  \r\n    \r\n    \r\n    \r\nreturn(\r\n    <div>\r\n    <CheckBox />\r\n    <div className=\"App\" onClick={addCharacter}>\r\n    {determineOrder()}\r\n   </div>\r\n   </div>\r\n\r\n  );\r\n}\r\n \r\nexport default Home;"]},"metadata":{},"sourceType":"module"}