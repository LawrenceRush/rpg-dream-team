{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\lrush\\\\Documents\\\\Bootcamp-Repository\\\\rpg-dream-team\\\\src\\\\components\\\\HomePage.js\";\nimport React, { useContext } from \"react\";\nimport Card from \"./Card\";\nimport CharacterContext from '../utils/CharacterContext';\nimport AlphaCheckBox from './AlphaCheckBox';\nimport FilterPowerCheckBox from './FilterPowerCheckBox';\nimport DropDown from './DropDown';\n\nconst Home = () => {\n  const Context = useContext(CharacterContext);\n  const Characters = Context.state;\n  const alphaCheckBoxStatus = Context.bunchaFunctions.alphaCheckBoxStatus;\n  const filterPowerCheckBoxStatus = Context.bunchaFunctions.filterPowerCheckBoxStatus;\n  const powerLevelFilter = Context.bunchaFunctions.powerLevelFilter; //Sort the funtion Aphabetically\n\n  const compare = (a, b) => {\n    // Use toUpperCase() to ignore character casing\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    let comparison = 0;\n\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  };\n\n  let alphabetCharacters = [...Characters].sort(compare);\n  var filteredCharacters = Characters.filter(character => {\n    console.log(character);\n    return character.powerlevel > powerLevelFilter;\n  });\n  console.log(filteredCharacters); // check if any checkboxes are displayed and return a map of cards based on that\n\n  const determineOrder = () => {\n    if (alphaCheckBoxStatus) {\n      return alphabetCharacters.map(character => React.createElement(Card, {\n        key: character.id,\n        character: character,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    }\n\n    return Characters.map(character => React.createElement(Card, {\n      key: character.id,\n      character: character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Filter\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \" \", React.createElement(FilterPowerCheckBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), \" By: \", React.createElement(DropDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Sort by alphabet\", React.createElement(AlphaCheckBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, determineOrder()));\n};\n\nexport default Home;","map":{"version":3,"sources":["c:/Users/lrush/Documents/Bootcamp-Repository/rpg-dream-team/src/components/HomePage.js"],"names":["React","useContext","Card","CharacterContext","AlphaCheckBox","FilterPowerCheckBox","DropDown","Home","Context","Characters","state","alphaCheckBoxStatus","bunchaFunctions","filterPowerCheckBoxStatus","powerLevelFilter","compare","a","b","nameA","name","toUpperCase","nameB","comparison","alphabetCharacters","sort","filteredCharacters","filter","character","console","log","powerlevel","determineOrder","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAMA,MAAMC,IAAI,GAAE,MAAM;AACd,QAAMC,OAAO,GAAEP,UAAU,CAACE,gBAAD,CAAzB;AADc,QAECM,UAFD,GAEeD,OAFf,CAENE,KAFM;AAAA,QAGPC,mBAHO,GAGgBH,OAAO,CAACI,eAHxB,CAGPD,mBAHO;AAAA,QAIPE,yBAJO,GAIsBL,OAAO,CAACI,eAJ9B,CAIPC,yBAJO;AAAA,QAKPC,gBALO,GAKaN,OAAO,CAACI,eALrB,CAKPE,gBALO,EAOf;;AAIC,QAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB;AACA,UAAMC,KAAK,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAd;AACA,UAAMC,KAAK,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAAd;AAGA,QAAIE,UAAU,GAAG,CAAjB;;AACA,QAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACjBC,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO,IAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACxBC,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,WAAOA,UAAP;AACD,GAbH;;AAeA,MAAIC,kBAAkB,GAAG,CAAC,GAAGd,UAAJ,EAAgBe,IAAhB,CAAqBT,OAArB,CAAzB;AACA,MAAIU,kBAAkB,GAAKhB,UAAU,CAACiB,MAAX,CAAkBC,SAAS,IAAI;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,WAAOA,SAAS,CAACG,UAAV,GAAuBhB,gBAA9B;AACD,GAH0B,CAA3B;AAKAc,EAAAA,OAAO,CAACC,GAAR,CAAYJ,kBAAZ,EAhCc,CAmCZ;;AACF,QAAMM,cAAc,GAAG,MAAM;AACzB,QAAIpB,mBAAJ,EAAyB;AACrB,aAAOY,kBAAkB,CAACS,GAAnB,CAAwBL,SAAD,IAAgB,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAIA,SAAS,CAACM,EAAvB;AAA2B,QAAA,SAAS,EAAIN,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvC,CAAP;AACH;;AACF,WAAOlB,UAAU,CAACuB,GAAX,CAAgBL,SAAD,IAAgB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAIA,SAAS,CAACM,EAAvB;AAA2B,MAAA,SAAS,EAAIN,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,CAAP;AACF,GALD;;AAMJ,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAO,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,WAAmC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CADA,CADF,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CALA,EAQA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCI,cAAc,EADf,CARA,CADJ;AAeC,CAzDD;;AA2DA,eAAexB,IAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport Card from \"./Card\"\r\nimport CharacterContext from '../utils/CharacterContext'\r\nimport AlphaCheckBox from './AlphaCheckBox'\r\nimport FilterPowerCheckBox from './FilterPowerCheckBox'\r\nimport DropDown from './DropDown'\r\n\r\n\r\n\r\n\r\n\r\nconst Home= () => {\r\n    const Context= useContext(CharacterContext);\r\n    const { state: Characters} = Context\r\n    const {alphaCheckBoxStatus} = Context.bunchaFunctions\r\n    const {filterPowerCheckBoxStatus} = Context.bunchaFunctions\r\n    const {powerLevelFilter} = Context.bunchaFunctions\r\n\r\n   //Sort the funtion Aphabetically\r\n    \r\n \r\n  \r\n    const compare = (a, b) => {\r\n        // Use toUpperCase() to ignore character casing\r\n        const nameA = a.name.toUpperCase();\r\n        const nameB = b.name.toUpperCase();\r\n        \r\n      \r\n        let comparison = 0;\r\n        if (nameA > nameB) {\r\n          comparison = 1;\r\n        } else if (nameA < nameB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n     \r\n    let alphabetCharacters = [...Characters].sort(compare)\r\n    var filteredCharacters  =  Characters.filter(character => {\r\n      console.log(character)\r\n      return character.powerlevel > powerLevelFilter\r\n    });\r\n    \r\n    console.log(filteredCharacters)\r\n   \r\n \r\n      // check if any checkboxes are displayed and return a map of cards based on that\r\n    const determineOrder = () => {\r\n        if (alphaCheckBoxStatus) {\r\n            return alphabetCharacters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n        }\r\n       return Characters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n    }\r\nreturn(\r\n    <div>\r\n      <div>Filter \r\n      <span> <FilterPowerCheckBox /> By: <DropDown/></span>\r\n      \r\n    </div>\r\n    <div>Sort by alphabet\r\n    <AlphaCheckBox />\r\n      </div>\r\n    <div className=\"App\" >\r\n    {determineOrder()}\r\n   </div>\r\n   </div>\r\n\r\n  );\r\n}\r\n \r\nexport default Home;"]},"metadata":{},"sourceType":"module"}