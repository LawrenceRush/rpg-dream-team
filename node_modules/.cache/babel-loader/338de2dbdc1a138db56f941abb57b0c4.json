{"ast":null,"code":"import _toConsumableArray from\"c:\\\\Users\\\\lrush\\\\Documents\\\\Bootcamp-Repository\\\\rpg-dream-team\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import React,{useContext}from\"react\";import Card from\"./Card\";import CharacterContext from'../utils/CharacterContext';import AlphaCheckBox from'./AlphaCheckBox';import FilterPowerCheckBox from'./FilterPowerCheckBox';import DropDown from'./DropDown';import'./../css/homePage.css';var Home=function Home(){var Context=useContext(CharacterContext);var Characters=Context.state;var alphaCheckBoxStatus=Context.bunchaFunctions.alphaCheckBoxStatus;var filterPowerCheckBoxStatus=Context.bunchaFunctions.filterPowerCheckBoxStatus;var powerLevelFilter=Context.bunchaFunctions.powerLevelFilter;//Sort the funtion Aphabetically\nvar compare=function compare(a,b){// Use toUpperCase() to ignore character casing\nvar nameA=a.name.toUpperCase();var nameB=b.name.toUpperCase();var comparison=0;if(nameA>nameB){comparison=1;}else if(nameA<nameB){comparison=-1;}return comparison;};var alphabetCharacters=_toConsumableArray(Characters).sort(compare);var filteredCharacters=Characters.filter(function(character){return character.powerlevel>powerLevelFilter;});// check if any checkboxes are displayed and return a map of cards based on that\nvar determineOrder=function determineOrder(){if(filterPowerCheckBoxStatus){console.log('working');console.log(filteredCharacters);return filteredCharacters.map(function(character){return React.createElement(Card,{key:character.id,character:character});});}if(alphaCheckBoxStatus){return alphabetCharacters.map(function(character){return React.createElement(Card,{key:character.id,character:character});});}return Characters.map(function(character){return React.createElement(Card,{key:character.id,character:character});});};return React.createElement(\"div\",null,React.createElement(\"div\",{className:\"filterDiv\"},\"Filter\",React.createElement(\"span\",{className:\"filterStuff\"},\" \",React.createElement(FilterPowerCheckBox,null),\" By: \",React.createElement(DropDown,null))),React.createElement(\"div\",{className:\"sortDiv\"},\"Sort by alphabet\",React.createElement(AlphaCheckBox,null)),React.createElement(\"div\",{className:\"App\"},determineOrder()));};export default Home;","map":{"version":3,"sources":["c:/Users/lrush/Documents/Bootcamp-Repository/rpg-dream-team/src/components/HomePage.js"],"names":["React","useContext","Card","CharacterContext","AlphaCheckBox","FilterPowerCheckBox","DropDown","Home","Context","Characters","state","alphaCheckBoxStatus","bunchaFunctions","filterPowerCheckBoxStatus","powerLevelFilter","compare","a","b","nameA","name","toUpperCase","nameB","comparison","alphabetCharacters","sort","filteredCharacters","filter","character","powerlevel","determineOrder","console","log","map","id"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\nimport Card from \"./Card\"\r\nimport CharacterContext from '../utils/CharacterContext'\r\nimport AlphaCheckBox from './AlphaCheckBox'\r\nimport FilterPowerCheckBox from './FilterPowerCheckBox'\r\nimport DropDown from './DropDown'\r\nimport './../css/homePage.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Home= () => {\r\n    const Context= useContext(CharacterContext);\r\n    const { state: Characters} = Context\r\n    const {alphaCheckBoxStatus} = Context.bunchaFunctions\r\n    const {filterPowerCheckBoxStatus} = Context.bunchaFunctions\r\n    const {powerLevelFilter} = Context.bunchaFunctions\r\n\r\n   //Sort the funtion Aphabetically\r\n    \r\n \r\n  \r\n    const compare = (a, b) => {\r\n        // Use toUpperCase() to ignore character casing\r\n        const nameA = a.name.toUpperCase();\r\n        const nameB = b.name.toUpperCase();\r\n        \r\n      \r\n        let comparison = 0;\r\n        if (nameA > nameB) {\r\n          comparison = 1;\r\n        } else if (nameA < nameB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n     \r\n    let alphabetCharacters = [...Characters].sort(compare)\r\n    var filteredCharacters  =  Characters.filter(character => {\r\n    return character.powerlevel > powerLevelFilter\r\n    });\r\n    \r\n    \r\n   \r\n \r\n      // check if any checkboxes are displayed and return a map of cards based on that\r\n    const determineOrder = () => {\r\n      if (filterPowerCheckBoxStatus) {\r\n        console.log('working')\r\n        console.log(filteredCharacters)\r\n        \r\n        return filteredCharacters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n    }\r\n        if (alphaCheckBoxStatus) {\r\n            return alphabetCharacters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n        }\r\n       return Characters.map((character) =>  <Card key = {character.id} character = {character}/>)\r\n    }\r\nreturn(\r\n    <div>\r\n      <div  className = \"filterDiv\">Filter \r\n      <span className = \"filterStuff\"> <FilterPowerCheckBox /> By: <DropDown/></span>\r\n      \r\n    </div>\r\n    <div className = \"sortDiv\">Sort by alphabet\r\n    <AlphaCheckBox />\r\n      </div>\r\n    <div className=\"App\" >\r\n    {determineOrder()}\r\n   </div>\r\n   </div>\r\n\r\n  );\r\n}\r\n \r\nexport default Home;"]},"metadata":{},"sourceType":"module"}